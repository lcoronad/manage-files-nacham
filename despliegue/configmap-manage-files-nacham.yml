kind: ConfigMap
apiVersion: v1
metadata:
  name: configmap-manage-files-nacham
data: 
  spring.application.name: manage-files-nacham
  logging.config: classpath:logback-spring.xml
  camel.springboot.name: manage-files-nacham
  camel.springboot.stream-caching-enabled: 'true'
  camel.springboot.use-m-d-c-logging: 'true'
  camel.springboot.use-breadcrumb: 'true'
  camel.component.servlet.mapping.context-path: /api/*
  spring.mvc.static-path-pattern: /resources/**
  server.address: '0.0.0.0'
  server.port: '8080'
  management.address: '0.0.0.0'
  management.port: '8081'
  management.security.enabled: 'false'
  endpoints.enabled: 'true'
  endpoints.info.sensitive: 'false'
  endpoints.health.enabled: 'false'
  camel.rest.component: servlet
  camel.rest.binding-mode: json
  camel.rest.enable-cors: 'true'
  camel.rest.port: '9090'
  camel.rest.context-path: /api
  camel.rest.host-name-resolver: localip
  camel.rest.api-context-path: /api-doc
  logstash.servers: 'localhost:5000,localhost:5000,localhost:5000'
  service.rest.uri: /files-nacham
  service.rest.description: "Administra los movimientos de los archivos"
  service.rest.save.uri: /save-movement-file
  service.rest.save.description: "Inserta un movimiento de un archivo"
  service.rest.get.state.uri: /get-file-state/{initFileDate}/{endFileDate}/{financialEntity}
  service.rest.get.state.description: "Obtiene el estado de un archivo"
  service.rest.get.file.list.uri: /get-file-list/{initFileDate}/{endFileDate}
  service.rest.get.file.list.description: "Obtiene una lista de archivos"
  service.rest.health.uri: /health-check
  service.rest.health.description: "Health"
  service.rest.select.file.list: SELECT * FROM MOVEMENTS_FILES WHERE FILE_DATE >= CAST ( :#initFileDate AS DATE ) AND file_date <= CAST ( :#endFileDate AS DATE ) AND file_state='Finalizado'
  service.rest.select.file.state: SELECT * FROM MOVEMENTS_FILES WHERE FILE_DATE >= CAST ( :#initFileDate AS DATE ) AND file_date <= CAST ( :#endFileDate AS DATE ) AND financial_entity = :#financialEntity
  service.rest.insert.movement.file: INSERT INTO MOVEMENTS_FILES VALUES(:#fileName, CAST ( :#fileDate AS DATE ), :#fileState, :#financialEntity, :#target)
  spring.datasource.initialize: 'true'
  spring.datasource.url: 'jdbc:postgresql://postgresql.ach-mft-integration.svc.cluster.local:5432/ach'
  spring.datasource.driverClassName: org.postgresql.Driver
  spring.h2.console.enabled: 'true'
